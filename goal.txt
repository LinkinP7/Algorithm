### Last History

work#027_221031
cafe#004_221029
home#007_221030

[inf]

String - 12/12 *                       
Array - 12/12 *                        
Two Pointer, Silding Window - 6/6 *    
HashMap, TreeSet - 5/5 *              
Stack,Queue - 8/8 *                      
Sorting and Searching - 6/10        
Recursive,Tree,Gragh - 0/14          
DFS, BFS - 0/15                      
Greedy - 0/8                        
dynamic Programming - 0/6            


[alg]
Sorting and Searching   6/10
Recursive, Tree, Gragh  14/14
DFS, BFS                0/15
Greedy                  0/8
dynamic Programming     0/6


// 다시 도전하기 => 2346(큐로 풀어보기)
                   1966(다시풀기.. 개어렵) 
                   17298(너무 돌아갔다... 다시풀기)
                   INF_TwoPoint_06 다시풀기... 슬라이딩 너무 어렵다...


/*
 * 방법 1
 * LinkedList는 Deque(Queue를 상속받고 있음)도 구현하고 있기 때문에
 * LinkedList로 선언해주어 사용 할 수 있다.
 */
LinkedList<Integer> q = new LinkedList<>();
q.offer();	// push
q.pop();	// pop
q.size();	// size
q.isEmpty();	// empty
q.peek();	// front
q.peekLast();	// back
 
 
/*
 * 방법 2
 * Deque 인터페이스로 선언한 뒤
 * LinkedList나 ArrayDeque로 생성하여 이용 할 수 있음
 */
Deque<Integer> q = new LinkedList<>();
Deque<Integer> q = new ArrayDeque<>();
 
// 메소드는 동일함
q.offer();	// push
q.pop();	// pop
q.size();	// size
q.isEmpty();	// empty
q.peek();	// front
q.peekLast();	// back

offerLast()
pollFirst()

TreeSet -> 레드블랙트리,  중복제거 및 정렬이 가능

TreeSet<Integer> Tset = new TreeSet<>();   // 기본적으로 오름차순 
TreeSet<Integer> Tset = new TreeSet<>(Collections.reverseOrder());   // 내림차순 정렬

hash.put(x, hash.get(x)-1);  정말 유용  
hash.put(x, hash.getOrDefault(x, 0)+1);


HashMap과 TreeMap -> 시간 복잡도는 Hash가 1로 log(n)인 Tree보다 빠르지만 정렬과 순서를 보장하지 않는다.
                     정렬된 키셋을 원한다면 TreeMap을 사용하자.

// 이진탐색

	// 재귀적 탐색
	static int binarySearch1(int key, int low, int high) {
		int mid;
		
		if(low <= high) {
			mid = (low + high) / 2;
			
			if(key == arr[mid]) { // 탐색 성공 
				return mid;
			} else if(key < arr[mid]) {
				return binarySearch1(key ,low, mid-1); // 왼쪽 부분 탐색 
			} else {
				return binarySearch1(key, mid+1, high); // 오른쪽 부분 탐색 
			}
		}
		
		return -1; // 탐색 실패 
	}
	
	// 반복적 탐색
	static int binarySearch2(int key, int low, int high) {
		int mid;
		
		while(low <= high) {
			mid = (low + high) / 2;
			
			if(key == arr[mid]) {
				return mid;
			} else if(key < arr[mid]) {
				high = mid - 1;
			} else {
				low = mid + 1;
			}
		}
		
		return -1; // 탐색 실패 
	}