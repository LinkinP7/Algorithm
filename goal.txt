[inf]

String - 12/12                       
Array - 12/12                        
Two Pointer, Silding Window - 6/6    
HashMap, TreeSet - 5/5              
Stack,Queue - 2/8                      
Sorting and Searching - 0/10        
Recursive,Tree,Gragh - 0/14          
DFS, BFS - 0/15                      
Greedy - 0/8                        
dynamic Programming - 0/6            



[alg]
8/2 hash, stack, queue      10/12
8/4 Sorting and Searching   0/10
8/5 Recursive, Tree, Gragh  0/14
8/6 Recursive, Tree, Gragh  0/14
8/7 DFS, BFS                0/15
8/8 DFS, BFS                0/15
8/9 Greedy                  0/8
8/10 dynamic Programming    0/6


// 다시 도전하기 => 2346(큐로 풀어보기)
                   1966(다시풀기.. 개어렵) 
                   17298(너무 돌아갔다... 다시풀기)
                   INF_TwoPoint_06 다시풀기... 슬라이딩 너무 어렵다...


/*
 * 방법 1
 * LinkedList는 Deque(Queue를 상속받고 있음)도 구현하고 있기 때문에
 * LinkedList로 선언해주어 사용 할 수 있다.
 */
LinkedList<Integer> q = new LinkedList<>();
q.offer();	// push
q.pop();	// pop
q.size();	// size
q.isEmpty();	// empty
q.peek();	// front
q.peekLast();	// back
 
 
/*
 * 방법 2
 * Deque 인터페이스로 선언한 뒤
 * LinkedList나 ArrayDeque로 생성하여 이용 할 수 있음
 */
Deque<Integer> q = new LinkedList<>();
Deque<Integer> q = new ArrayDeque<>();
 
// 메소드는 동일함
q.offer();	// push
q.pop();	// pop
q.size();	// size
q.isEmpty();	// empty
q.peek();	// front
q.peekLast();	// back

offerLast()
pollFirst()

TreeSet -> 레드블랙트리,  중복제거 및 정렬이 가능

TreeSet<Integer> Tset = new TreeSet<>();   // 기본적으로 오름차순 
TreeSet<Integer> Tset = new TreeSet<>(Collections.reverseOrder());   // 내림차순 정렬

hash.put(x, hash.get(x)-1);  정말 유용  
hash.put(x, hash.getOrDefault(x, 0)+1);