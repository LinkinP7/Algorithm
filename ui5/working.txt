
[초기에 npm install 할 때]
sppcap 에서 npm i 한번
app 으로 들어가서 npm i 한번 더

[새로운 메뉴 복사할 때]

메뉴관리 -> 메뉴상세 추가로 미리 매뉴채번이나 정보를 등록하여 준다.

비슷한 메뉴 복사하고 네이밍을 수정한다. // 메뉴채번이나 Manifest 등등 기본적인 세팅이 먼저이다.

Search에서 Replace 기능을 켠다. 

현재 있는 메뉴와 바꿀 메뉴의 이름을 수정한다 -> Mgt 먼저 수정하고 대문자, 소문자도 보며 체크해준다.
                                            Mgt 빼고 다시 한번 체크해준다

app/lge/sp/np/netCloseMgt/**  으로 필터를 걸면 된다

changePriceMgt -> netCloseMgt 
ChangePriceMgt -> NetCloseMgt
changePrice -> netClose
ChangePrice -> NetClose

처럼 4번 다 확인해준다. 

그리고 Manifest에서 사용할 MainService 를 확인해보자

마지막으로 역할관리 -> 공통의 system_admin을 찾아서 양산관리 메뉴에 추가해주면 된다.
신규 생성된 메뉴는 권한부여가 No로 되어있어 안보이니 Yes로 바꿔주면 된다.

[화면만 볼때]

applicationstudio.cloud.sap/standalone/index.html

[잡]
manifest에서 uri 경로는 어노테이션 해주는 대로 커스텀해서 사용할 수 있다.

[서비스 찾기]
보통 서비스는 자바파일이 아닌 cds 파일로 찾아야 하며, 해당 서비스 명을 서칭으로 .cds 필터를 주면 @path 로 쉽게 찾을 수 있다.

[모델개념]
detailModel>GeneralView  // 'detailModel' 모델안의 객체 GeneralView
테이블 형태라고 생각했지만, 그냥 객체가 제이슨처럼 테이블 한 row 의 정보를 들고있는걸로 생각하면 된다.

[프론트 속성 찾기]
ui5 속성을 모르겠다면 aggregation부터 찾아보며 올라가자. 라이브러리 검색하고, sample에서 직접 확인도 해보자.

[multiLabels]
ui.table의 multiLabels 는 headerSpan으로 컨트롤하며 멀티라벨의 위부터 순서대로 칸을 설정하면 된다.
headerSpan = "3,2" // 멀티라벨의 첫번째는 3칸 늘리기, 두번째는 2칸 늘리기. 그럼 보통 3번째 라인도 존재
headerSpan = "7"   // 멀티라벨의 첫번째칸 7칸 늘리기. 테이블 컬럼 감쌀때 주로 사용.

[서비스 정보 확인]
8080 주소창에서 서비스 직접 접근 // cds는 파라미터값을 같이 보내며 뒤에 /set 을 붙임
서비스가 나오지 않음 -> 해당 뷰가 정상적인지 확인 -> 백단에서 확인
해당 서비스.cds를 찾아감 -> 해당 뷰를 찾음
.hdbview 에서 실제 쿼리를 확인 할 수 있다. -> where 절을 db에서 직접 확인해볼 수 있다.

db에서 set 'TENANT_ID' = 'L1100'; 
set을 이용하면 현재 디비에서 조회시 해당 파라미터의 값을 직접 입력 가능하다.
즉, User_session의 값을 대체할 수 있다.

[안보이는 footer 찾는법]
UI5 진단(ctrl + alt + shift + p)을 열고 OverflowToolbar를 찾는다.
해당 버튼들이 존재하는지 확인 하고 visible 체크하면 볼 수 있다.

[뷰를 서비스화]
-service.cds 에서 뷰를 서비스화 시킴

뷰는 -model.cds에서 확인 가능하며
쿼리는 VIEW,hdbview에서 확인한다.

Entity와 DTO를 분리해서 관리해야 하는 이유는 DB와 View 사이의 역할을 철저히 분리하기 위해서이다.
Entity 클래스는 실제 테이블과 매핑되어 만일 변경하면 다른 클래스에 영향을 끼치고,
DTO 클래스는 View와 통신하며 자주 변경되므로 분리를 해주어야 한다. (Entity 클래스 보호)

[8080에서 뷰 파라미터 적용]
lge.sp.np.NpApprovalComService/UniNetPriceRedChkView(p_approval_id='20221013_00021')/Set

서비스/뷰(파라미터='값')/Set 으로 사용하며 파라미터 값 넣을때, 띄어쓰기 주의 => %20으로 인식해 값이 안들어감

[테이블1]
테이블의 값 적용은 모델의 값만 할당해줘도 자동으로 출력된다
컬럼 text: 혹은 value에 {모델명>/프로퍼티} 로 넣어주면 된다.

테이블의 외형은 class 반영이 영향을 미친다. compact 혹은 cozy 확인하고 다른 커스텀 클래스를 적용할 수 있는지 확인해보자.

테이블 줄간격이 너무 클때는 this.addStyleClass("sapUiSizeCozy") -> this.addStyleClass("sapUiSizeCompact") 도 도움이 된다.

[바인딩 전 set의 시점]
init 보다 빠른 

extractBindingInfo(oValue, oScope){
    if(oValue && (oValue.filters || oValue.sorters)){
        this.oFilters = oValue.filters || [];
        this.oSorters = oValue.oSorters || [];
    }else{
        return Parent.prototype.extractBindingInfo.call(this, oValue, oScope);
    }
}

도 있으니 활용해보자

[다이어그램]
.js 로 그린 다이어그램은 안에서 테이블과 컬럼, 타이틀까지 다 지정해줘야한다.

init 혹은 constructor 로 초기설정을 하고 

createContent 펑션을 만들어 텍스트,테이블 등을 선언하고
this.addContent(this.table); 로 각각 다이어그램에 할당해주면된다.

ajax 사용시 시점으로 인해 테이블에 세팅이 되지 않을 수 있으니 async: false로 설정하던지,

open: function(){
    Parent.prototype.open.apply(this, arguments); 
}
로 open을 오버라이딩해 사용하면 된다.

[ajax 사용시 define]
sap.ui.define 에 "ext/lib/core/service/ODataXhrService", "sap/ui/model/json/JSONModel" 과
function에 ODataXhrService, JSONModel 를 정의해주어야 한다.

[스프링 런]
mvn spring-boot:run -Pjava 하면 자바단 gen은 무시하고 실행한다.

[ui 화면에서 동일 객체인지 확인]
화면에 그려진 테이블이나 다이얼로그 등의 객체가 동일한 것인지 확인할 때,
디버깅 콘솔창에서 this.sId 로 객체 자체의 정보를 확인해 볼 수 있다.
다이얼로그가 닫히고 새로 열리는지 기존것을 활용하는지 판별할때 사용하였다.

[ui5 define]
define과 function 순서 무조건 맞추자... 순서 안맞으면 사용이 안된다.
define의 리턴값을 담은 걸 function에서 객체화 시켜 만들어 사용한다. 즉, function에 들어가는 부분이 객체명과 비슷하며 내맘대로 적용할 수 있다.

[MockUser]
src - main - resources - MockUser.json 에 있다.
DB의 CM_USER에서 사용자의 이름이나 이메일로 조회 후 해당 값들 복사해서 가져오면 된다.

[현재 보고 있는 데이터 파악]
이벤트 발생 시점에서 사용되고 있는 서비스를 파악하고 그 서비스 기반 데이터로 기준을 잡자.
같은 화면의 같은 값이라도 불러오는 서비스와 테이블이 다를 수 있다.

사용자에게는 동일한 위치의 데이터라도, 어떤 서비스로 어떤 테이블을로 부터 온 데이터인지 파악해야 한다.
나중에 스크럼 개발 조율시 서비스 시점으로 말을 하자.

[네트워크 데이터 판별]
batch 에서 페이로드의 get 뒤에 붙은 서비스와 파라미터를 잘 보고 해당 값 미리보기로 데이터를 긁어서 콘솔창에 뿌리면 바로 받아온 데이터 확인 가능
